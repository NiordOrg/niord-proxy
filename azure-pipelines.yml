# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
variables:
  container-registry: ""
  container-registry-repository: ""
  project-path: ""

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: 'wget https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip'

- task: ExtractFiles@1
  displayName: 'Unzip Maven'
  inputs:
      archiveFilePatterns: 'apache-maven-3.5.4-bin.zip'
      destinationFolder: '$(build.sourcesdirectory)/maven'

- task: Maven@3
  displayName: 'Build app using Maven'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    mavenVersionOption: 'Path'
    mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-3.5.4'
    mavenSetM2Home: true
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: Docker@2
  displayName: 'Build and push image'
  inputs:
    containerRegistry: '$(container-registry)'
    repository: '$(container-registry-repository)'
    Dockerfile: '$(project-path)/Dockerfile'
    buildContext: '$(build.artifactstagingdirectory)'
    tags: '$(Build.BuildNumber)'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Docker-Compose'
  inputs:
    targetPath: '$(project-path)/docker-compose.yml'
    artifact: niord-proxy